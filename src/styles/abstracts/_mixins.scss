@use 'sass:math';

@mixin device($breakpoint) {
	@if $breakpoint == phone-ant {
		@media only screen and (max-width: 20em) {
			@content;
		} //! 320/16
	}
	@if $breakpoint == phone {
		@media only screen and (max-width: 31.25em) {
			@content;
		} //! 500/16
	}
	@if $breakpoint == phone-land {
		@media only screen and (max-width: 37.5em) {
			@content;
		} //! 600/16
	}
	@if $breakpoint == tab {
		@media only screen and (max-width: 56.25em) {
			@content;
		} //! 900/16
	}
	@if $breakpoint == tab-land {
		@media only screen and (max-width: 75em) {
			@content;
		} //! 1200/16
	}
	@if $breakpoint == big {
		@media only screen and (min-width: 120em) {
			@content;
		} //! 1920/16
	}
}

@mixin scrollbars($size, $foreground-color, $background-color: mix($foreground-color, white, 50%)) {
	//? For Google Chrome
	&::-webkit-scrollbar {
		width: $size;
		height: $size;
	}

	&::-webkit-scrollbar-thumb {
		background: $foreground-color;
	}

	&::-webkit-scrollbar-track {
		background: $background-color;
	}

	//? For Internet Explorer
	body {
		scrollbar-face-color: $foreground-color;
		scrollbar-track-color: $background-color;
	}
}

@mixin delay($number, $value) {
	@for $i from 1 to ($number + 1) {
		&:nth-of-type(#{$i}) {
			animation-delay: $i * $value;
		}
	}
}

@mixin delay-random($number, $totalSec, $mainDelaySec) {
	@for $i from 1 to ($number + 1) {
		&:nth-of-type(#{$i}) {
			animation-delay: #{(math.div(math.random($totalSec), 10)) + $mainDelaySec}s;
		}
	}
}
@mixin delay-random-child($items, $timeSec, $totalSec, $mainDelaySec, $animName) {
	@for $i from 1 to ($items + 1) {
		&:nth-child(#{$i}) {
			animation: #{$animName} #{$timeSec}s backwards;
			animation-delay: #{(math.div(math.random($totalSec), 10)) + $mainDelaySec}s;
		}
	}
}
